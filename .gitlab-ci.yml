# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages


#image: ruby ##latest(default by without image)
#image: gcc
#image: gcc:1.0 #not found
image: ruby:2.5
#image: busybox:latest

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

variables:
  MY_GLOBAL_VAR1: "this-mygv1"

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  artifacts:
    paths: [.]
    exclude: [.git/*]
  variables:
    MY_JOB_VAR1: "this-myjv1"
  script:
    - echo -e "==mytt..\n"; date;echo $HOME;pwd; uname -a;hostname;id; { which gcc git busybox; gcc -v; python3 -V;}||echo $?;true;
    - echo -e "==mytt1..\n"; ls /bin|xargs; echo =; ls /usr/bin|xargs; echo =; ls /usr/local/bin||echo $?|xargs; echo =; busybox||true;
    - echo -e "==mytt1..\n"; mount; env|sort; ls /; touch /tmp/aa;
    - echo -e "==mytt2..\n"; { ip addr; ping -c4 www.baidu.com;} ||true;
    - echo -e "==mytt3..\n"; { xxxCmd || echo $?;true;}; ping -c4 www.google.com ||true;
    - echo -e "==mytt4..\n"; { pwd;aaa;bbb;which aaa bbb;pwd;}||echo $?;true; pwd;
    - echo -e "==mytt5..\n"; echo "varibles, '$MY_GLOBAL_VAR1' - '$MY_JOB_VAR1'"
#    - echo -e "==t0\n"; ls /usr/bin /usr/local/bin ||echo $?;true;  #ls /usr//bin|less|cat|xargs echo
    - echo -e "==t2\n"; pwd;ls ../;ls ../../; ls -alF --col /builds/asbcd20z/ci-2109-a-2/
    - sh -x /builds/asbcd20z/ci-2109-a-2/test1.c ||true
#    - ls /bin; echo -e "==t2==\n"; ls -F --col /usr/bin; which busybox;;ls -l /usr/bin/gcc;  ifconfig -a; ip addr; ping -c4 www.baidu.com
    - echo "Compiling the code..."
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo -e "==mytt..\n"; uname -a;hostname; which gcc;ls -l /usr/bin/gcc; gcc -v; python3 -V; ping -c4 www.baidu.com
#    - ls /bin; echo -e "==t2==\n"; ls -F --col /usr/bin; ls /bin/busybox; busybox;  ifconfig -a
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
